import React, { useState } from 'react';
import { Calendar, Clock, MapPin, Plus, X, Check, AlertCircle, Search } from 'lucide-react';

const TournamentScheduleList = ({ matches, schedules, onAddSchedule, onDeleteSchedule, eventId, bracketId }) => {
  const [selectedMatch, setSelectedMatch] = useState(null);
  const [showScheduleForm, setShowScheduleForm] = useState(false);
  const [filterStatus, setFilterStatus] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [formData, setFormData] = useState({
    date: '',
    time: '',
    venue: '',
    description: ''
  });

  const scheduledMatchIds = new Set(schedules.map(s => s.matchId));

  const filteredMatches = matches.filter(match => {
    const matchesStatus = filterStatus === 'all' || 
      (filterStatus === 'scheduled' && scheduledMatchIds.has(match.id)) ||
      (filterStatus === 'unscheduled' && !scheduledMatchIds.has(match.id));
    
    const matchesSearch = searchTerm === '' || 
      match.team1_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      match.team2_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      `Game #${match.id}`.toLowerCase().includes(searchTerm.toLowerCase());
    
    return matchesStatus && matchesSearch;
  });

  const handleOpenScheduleForm = (match) => {
    setSelectedMatch(match);
    setShowScheduleForm(true);
    
    const existingSchedule = schedules.find(s => s.matchId === match.id);
    if (existingSchedule) {
      setFormData({
        date: existingSchedule.date || '',
        time: existingSchedule.time || '',
        venue: existingSchedule.venue || '',
        description: existingSchedule.description || ''
      });
    } else {
      setFormData({ date: '', time: '', venue: '', description: '' });
    }
  };

  const handleCloseForm = () => {
    setShowScheduleForm(false);
    setSelectedMatch(null);
    setFormData({ date: '', time: '', venue: '', description: '' });
  };

  const handleSubmit = () => {
    if (!selectedMatch || !formData.date || !formData.time || !formData.venue) {
      alert('Please fill in all required fields');
      return;
    }

    onAddSchedule({
      eventId,
      bracketId,
      matchId: selectedMatch.id,
      ...formData
    });

    handleCloseForm();
  };

  const handleDelete = (scheduleId) => {
    if (window.confirm('Are you sure you want to delete this schedule?')) {
      onDeleteSchedule(scheduleId);
    }
  };

  const getMatchSchedule = (matchId) => {
    return schedules.find(s => s.matchId === matchId);
  };

  const formatDate = (dateStr) => {
    if (!dateStr) return '';
    const date = new Date(dateStr);
    return date.toLocaleDateString('en-US', { 
      weekday: 'short', 
      year: 'numeric', 
      month: 'short', 
      day: 'numeric' 
    });
  };

  const formatTime = (timeStr) => {
    if (!timeStr) return '';
    const [hours, minutes] = timeStr.split(':');
    const hour = parseInt(hours);
    const ampm = hour >= 12 ? 'PM' : 'AM';
    const displayHour = hour % 12 || 12;
    return `${displayHour}:${minutes} ${ampm}`;
  };

  const getRoundLabel = (match) => {
    if (match.bracket_type === 'championship') {
      return match.round_number === 201 ? 'Reset Final' : 'Grand Final';
    } else if (match.bracket_type === 'loser') {
      return `LB Round ${match.round_number - 100}`;
    } else {
      return `Round ${match.round_number}`;
    }
  };

  const getBracketTypeColor = (bracketType) => {
    switch (bracketType) {
      case 'winner': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';
      case 'loser': return 'bg-red-500/20 text-red-400 border-red-500/30';
      case 'championship': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';
    }
  };

  return (
    <div className="w-full h-full bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 rounded-xl p-6">
      <div className="mb-6">
        <h2 className="text-3xl font-bold text-white mb-2 flex items-center gap-3">
          <Calendar className="w-8 h-8" />
          Match Schedule List
        </h2>
        <p className="text-slate-300">View and manage schedules for all tournament matches</p>
      </div>

      <div className="mb-6 flex flex-col md:flex-row gap-4">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400" />
          <input
            type="text"
            placeholder="Search by team name or game number..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-3 bg-slate-800/50 border border-slate-700 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex gap-2">
          <button
            onClick={() => setFilterStatus('all')}
            className={`px-4 py-3 rounded-lg font-medium transition-all ${
              filterStatus === 'all'
                ? 'bg-blue-500 text-white'
                : 'bg-slate-800/50 text-slate-300 hover:bg-slate-700'
            }`}
          >
            All ({matches.length})
          </button>
          <button
            onClick={() => setFilterStatus('scheduled')}
            className={`px-4 py-3 rounded-lg font-medium transition-all ${
              filterStatus === 'scheduled'
                ? 'bg-green-500 text-white'
                : 'bg-slate-800/50 text-slate-300 hover:bg-slate-700'
            }`}
          >
            Scheduled ({schedules.length})
          </button>
          <button
            onClick={() => setFilterStatus('unscheduled')}
            className={`px-4 py-3 rounded-lg font-medium transition-all ${
              filterStatus === 'unscheduled'
                ? 'bg-orange-500 text-white'
                : 'bg-slate-800/50 text-slate-300 hover:bg-slate-700'
            }`}
          >
            Unscheduled ({matches.length - schedules.length})
          </button>
        </div>
      </div>

      <div className="space-y-4 max-h-[600px] overflow-y-auto pr-2">
        {filteredMatches.length === 0 ? (
          <div className="text-center py-12">
            <AlertCircle className="w-16 h-16 text-slate-600 mx-auto mb-4" />
            <p className="text-slate-400 text-lg">No matches found</p>
          </div>
        ) : (
          filteredMatches.map((match) => {
            const schedule = getMatchSchedule(match.id);
            const isScheduled = !!schedule;

            return (
              <div
                key={match.id}
                className={`bg-slate-800/40 backdrop-blur-sm rounded-xl border-2 transition-all hover:shadow-xl hover:border-blue-500/50 ${
                  isScheduled ? 'border-green-500/30' : 'border-slate-700'
                }`}
              >
                <div className="p-5">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <span className="text-slate-400 font-semibold">Game #{match.id}</span>
                      <span className={`px-3 py-1 rounded-full text-xs font-bold border ${getBracketTypeColor(match.bracket_type)}`}>
                        {getRoundLabel(match)}
                      </span>
                      {match.bracket_type !== 'winner' && (
                        <span className={`px-3 py-1 rounded-full text-xs font-bold border ${getBracketTypeColor(match.bracket_type)}`}>
                          {match.bracket_type === 'loser' ? "Loser's" : 'Championship'}
                        </span>
                      )}
                    </div>
                    
                    {isScheduled ? (
                      <div className="flex items-center gap-2">
                        <span className="text-green-400 text-sm font-medium flex items-center gap-1">
                          <Check className="w-4 h-4" />
                          Scheduled
                        </span>
                        <button
                          onClick={() => handleDelete(schedule.id)}
                          className="p-2 bg-red-500/20 text-red-400 rounded-lg hover:bg-red-500/30 transition-colors"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      </div>
                    ) : (
                      <button
                        onClick={() => handleOpenScheduleForm(match)}
                        className="flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-medium"
                      >
                        <Plus className="w-4 h-4" />
                        Add Schedule
                      </button>
                    )}
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div className={`p-4 rounded-lg border-2 ${
                      match.winner_id === match.team1_id 
                        ? 'bg-green-500/10 border-green-500/30' 
                        : 'bg-slate-700/30 border-slate-600'
                    }`}>
                      <div className="flex items-center justify-between">
                        <span className="text-white font-bold text-lg">
                          {match.team1_name || 'TBD'}
                        </span>
                        {match.winner_id === match.team1_id && (
                          <span className="text-2xl">ðŸ‘‘</span>
                        )}
                        {match.score_team1 !== null && (
                          <span className="text-white font-bold text-xl">{match.score_team1}</span>
                        )}
                      </div>
                    </div>
                    
                    <div className={`p-4 rounded-lg border-2 ${
                      match.winner_id === match.team2_id 
                        ? 'bg-green-500/10 border-green-500/30' 
                        : 'bg-slate-700/30 border-slate-600'
                    }`}>
                      <div className="flex items-center justify-between">
                        <span className="text-white font-bold text-lg">
                          {match.team2_name || (match.team2_id ? 'TBD' : 'BYE')}
                        </span>
                        {match.winner_id === match.team2_id && (
                          <span className="text-2xl">ðŸ‘‘</span>
                        )}
                        {match.score_team2 !== null && (
                          <span className="text-white font-bold text-xl">{match.score_team2}</span>
                        )}
                      </div>
                    </div>
                  </div>

                  {isScheduled && (
                    <div className="bg-slate-700/30 rounded-lg p-4 space-y-2">
                      <div className="flex items-center gap-2 text-slate-300">
                        <Calendar className="w-4 h-4 text-blue-400" />
                        <span className="font-medium">{formatDate(schedule.date)}</span>
                      </div>
                      <div className="flex items-center gap-2 text-slate-300">
                        <Clock className="w-4 h-4 text-blue-400" />
                        <span className="font-medium">{formatTime(schedule.time)}</span>
                      </div>
                      <div className="flex items-center gap-2 text-slate-300">
                        <MapPin className="w-4 h-4 text-blue-400" />
                        <span className="font-medium">{schedule.venue}</span>
                      </div>
                      {schedule.description && (
                        <div className="pt-2 border-t border-slate-600">
                          <p className="text-slate-400 text-sm">{schedule.description}</p>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            );
          })
        )}
      </div>

      {showScheduleForm && selectedMatch && (
        <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-slate-800 rounded-2xl p-6 max-w-md w-full border-2 border-blue-500/30 shadow-2xl">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-2xl font-bold text-white flex items-center gap-2">
                <Calendar className="w-6 h-6 text-blue-400" />
                Add Schedule
              </h3>
              <button
                onClick={handleCloseForm}
                className="p-2 hover:bg-slate-700 rounded-lg transition-colors"
              >
                <X className="w-5 h-5 text-slate-400" />
              </button>
            </div>

            <div className="mb-6 p-4 bg-slate-700/50 rounded-lg">
              <p className="text-sm text-slate-400 mb-2">Scheduling for:</p>
              <p className="text-white font-bold">
                {selectedMatch.team1_name || 'TBD'} vs {selectedMatch.team2_name || (selectedMatch.team2_id ? 'TBD' : 'BYE')}
              </p>
              <p className="text-sm text-slate-400 mt-1">
                Game #{selectedMatch.id} â€¢ {getRoundLabel(selectedMatch)}
              </p>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  Date *
                </label>
                <input
                  type="date"
                  value={formData.date}
                  onChange={(e) => setFormData({ ...formData, date: e.target.value })}
                  className="w-full px-4 py-3 bg-slate-700 border border-slate-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  Time *
                </label>
                <input
                  type="time"
                  value={formData.time}
                  onChange={(e) => setFormData({ ...formData, time: e.target.value })}
                  className="w-full px-4 py-3 bg-slate-700 border border-slate-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  Venue *
                </label>
                <input
                  type="text"
                  placeholder="e.g., Main Court, Stadium A"
                  value={formData.venue}
                  onChange={(e) => setFormData({ ...formData, venue: e.target.value })}
                  className="w-full px-4 py-3 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  Description (Optional)
                </label>
                <textarea
                  placeholder="Add any additional notes..."
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  rows={3}
                  className="w-full px-4 py-3 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
                />
              </div>

              <div className="flex gap-3 pt-4">
                <button
                  onClick={handleCloseForm}
                  className="flex-1 px-4 py-3 bg-slate-700 text-white rounded-lg hover:bg-slate-600 transition-colors font-medium"
                >
                  Cancel
                </button>
                <button
                  onClick={handleSubmit}
                  className="flex-1 px-4 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-medium"
                >
                  Save Schedule
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TournamentScheduleList;